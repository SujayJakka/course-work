
# linear_genotype.py

import random
from copy import deepcopy

class LinearGenotype():
    def __init__(self):
        self.fitness = None
        self.genes = None


    def random_initialization(self, shapes, bounds, **kwargs):
        # TODO: Initialize self.genes, using the input parameters.
        #       It should be an indexable data structure of length len(shapes),
        #       where each element is an indexable data structure of length 3.
        #       The first value of each element should be an integer within the
        #       half-open interval [bounds[0][0], bounds[0][1]). The second should be
        #       similar, within [bounds[1][0], bounds[1][1]). The third should be
        #       either 0, 1, 2, or 3. All values should be chosen uniform randomly.

        # An array is used as the underlying data structure for the Linear Genotype
        self.genes = []

        # We are generating a random x, y, and r value for each shape and adding it to our Linear Genotype
        for i in range(len(shapes)):

            # We subtract by 1 as the random.randint method is inclusive for both endpoints
            x_value = random.randint(bounds[0][0], bounds[0][1] - 1)
            y_value = random.randint(bounds[1][0], bounds[1][1] - 1)
            
            r_value = random.randint(0, 3)
            self.genes.append((x_value, y_value, r_value))


    def serialize(self):
        # TODO: Return a string representation of self.genes

        # Converts self.genes from an array of tuples into a string and returns it
        return str(self.genes)


    def deserialize(self, serialization):
        # TODO: Recreate self.genes from serialization,
        #       which is a string generated by your serialize method

        # Converts the string serialization to an array of tuples and assigns it to the self.genes instance variable
        self.genes = eval(serialization)
        
        


    def recombine(self, mate, method, **kwargs):
        child = LinearGenotype()

        # TODO: Recombine genes of self with mate and
        #       assign to child's genes member variable
        assert method.casefold() in {'uniform', 'one-point', 'bonus'}
        if method.casefold() == 'uniform':
            # Perform uniform recombination
            pass

        elif method.casefold() == 'one-point':
            # Perform one-point crossover
            pass

        elif method.casefold() == 'bonus':
            # This is a red deliverable (i.e., bonus for anyone).
            # Implement the bonus crossover operator as described
            # in deliverable Red 1 of Assignment 1b.
            pass

        return child


    def mutate(self, bounds, bonus=None, **kwargs):
        mutant = LinearGenotype()
        mutant.genes = deepcopy(self.genes)

        if not bonus:
            # TODO: Mutate genes of mutant
            pass


        else:
            # This is a red deliverable (i.e., bonus for anyone).
            # Implement the bonus mutation operator as described
            # in deliverable Red 1 of Assignment 1b.
            pass

        return mutant


    @classmethod
    def initialization(cls, mu, *args, **kwargs):
        population = [cls() for _ in range(mu)]
        for i in range(len(population)):
            population[i].random_initialization(*args, **kwargs)
        return population
